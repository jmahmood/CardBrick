# syntax=docker/dockerfile:1.6

################################################################################
# STAGE 1: Build the Rust App
################################################################################
# Use a base image with an older glibc (2.31) to ensure compatibility
FROM rust:1.72-bullseye as builder

RUN rustup update stable && rustup default stable

# Install the cross-compilation target
RUN rustup target add aarch64-unknown-linux-gnu

# --- Set up archived repositories and install ALL build dependencies ---
RUN dpkg --add-architecture arm64 && \
    echo "deb [trusted=yes] http://archive.debian.org/debian bullseye main" > /etc/apt/sources.list && \
    apt-get update && \
    apt-get install -y --no-install-recommends \
        gcc-aarch64-linux-gnu \
        pkg-config \
        libsdl2-dev:arm64 \
        libsdl2-image-dev:arm64 \
        libsdl2-ttf-dev:arm64 cmake:arm64 && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# --- Configure the build environment for cross-compilation ---
WORKDIR /app
ENV CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
ENV PKG_CONFIG_ALLOW_CROSS=1
ENV PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig
ENV SDL2_SYS_DISABLE_VENDORING=1

# --- Build the Rust application and copy the final binary ---
COPY Cargo.toml Cargo.lock* ./
RUN --mount=type=cache,target=/usr/local/cargo/registry cargo fetch
COPY . .
RUN --mount=type=cache,target=/usr/local/cargo/registry \
    --mount=type=cache,target=/app/target \
    sh -c ' \
        cargo build --release --target aarch64-unknown-linux-gnu && \
        cp ./target/aarch64-unknown-linux-gnu/release/cardbrick /app/cardbrick \
    '

################################################################################
# STAGE 2: Final Artifact Export
################################################################################
FROM scratch

# Copy only the final compiled executable from its new location
COPY --from=builder /app/cardbrick /